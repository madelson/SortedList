using System;
using System.Collections.Generic;
using System.Text;

namespace Medallion.Collections
{
    internal static class RandomizationHelper
    {
        internal const int MaxTableIndex = 0xFF;
        internal const int Shift = 17;
        public const uint RandomStateStart = 1290589266;
        private const uint Prime = 179424673;

        #region ---- Tables ----
        /// <summary>
        /// A table of <see cref="MaxTableIndex"/> + 1 pre-rolled values for the 1 / (n + 1) calculation in <see cref="Choose(int, ref uint)"/>
        /// </summary>
        private static readonly int[] MaxNTable = new[] { 2, 0, 0, 2, 0, 0, 0, 0, 19, 2, 3, 2, 1, 1, 0, 6, 0, 0, 0, 0, 0, 0, 14, 21, 2, 4, 0, 12, 0, 3, 0, 29, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 2, 0, 0, 255, 1, 175, 1, 3, 0, 1, 0, 3, 102, 4, 2, 6, 5, 0, 6, 4, 0, 0, 0, 0, 1, 0, 3, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 45, 1, 0, 72, 2, 0, 0, 0, 3, 1, 0, 0, 0, 1, 2, 0, 0, 0, 9, 1, 1, 2, 0, 10, 3, 0, 0, 56, 0, 0, 16, 2, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 4, 1, 2, 0, 0, 0, 5, 0, 1, 8, 0, 0, 1, 11, 1, 0, 0, 4, 3, 23, 2, 1, 0, 0, 4, 5, 5, 3, 3, 0, 7, 0, 2, 0, 0, 0, 9, 0, 0, 15, 13, 0, 12, 1, 1, 0, 5, 0, 9, 1, 0, 0, 4, 37, 0, 0, 2, 0, 0, 1, 2, 0, 0, 0, 7, 0, 0, 25, 0, 10, 0, 0, 0, 0, 7, 0, 0, 8, 0, 0, 2, 0, 3, 0, 0, 1, 0, 0, 1, 0, 6, 1, 6, 3, 1, 0, 1, 0, 0, 0, 3, 17, 5, 0, 0, 33, 1, 1, 2, 0, 7, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 1, 0, 0, 4, 1, 0, 1, 0, 0 };

        /// <summary>
        /// A table of <see cref="MaxTableIndex"/> + 1 random values in [0, 1].
        /// 
        /// Generated by GenerateNextDoubleTable in tests
        /// </summary>
        private static readonly double[] NextDoubleTable = new[] { 0.95617983213478808, 0.38351171225871772, 0.97333064872201047, 0.081006617091073152, 0.580320492126539, 0.62133082384486016, 0.72055168556151217, 0.741254810925808, 0.603822183613888, 0.11158462986616757, 0.41595867187281366, 0.23717176112650484, 0.17973145075662311, 0.60119231440001175, 0.90281293937797835, 0.82704296168043556, 0.12547474722210694, 0.18007427383828689, 0.9221611294606592, 0.30022621494723734, 0.088960314485246883, 0.52507362165197058, 0.24043206053777344, 0.58952885579853109, 0.80504703752409168, 0.74892023250711037, 0.81274286978352961, 0.44019733008684037, 0.42908608977016494, 0.73065076749947044, 0.12922217587475815, 0.80460053725641378, 0.62086038200440807, 0.0097434589302285435, 0.2203285394211546, 0.17932038746894818, 0.554189078178215, 0.30003394783324722, 0.76328734699078438, 0.76919907299846646, 0.980548289519918, 0.57496762840199978, 0.066731317977749782, 0.58397296338109062, 0.77227497903907671, 0.027666609362652084, 0.65441903092632836, 0.61973572569131485, 0.68776623215100019, 0.30138821931122228, 0.18629830276018178, 0.77109327164627817, 0.81512575799466669, 0.60135611364516728, 0.670750613243608, 0.37433880324374447, 0.63612190102953536, 0.36074921605546062, 0.62105525003092366, 0.71831770269053707, 0.6427913773149535, 0.54668895640929771, 0.56250193921420732, 0.16914878364700692, 0.87886137027948064, 0.75012167162981624, 0.13812674219461574, 0.8410752926004621, 0.58420172248633961, 0.88094184948583731, 0.848457016875051, 0.048938403241782114, 0.76543294263691852, 0.96952518395345133, 0.25482043016798306, 0.69718527223135418, 0.73679990220698688, 0.09658807695922067, 0.60347935484996451, 0.14359238463054025, 0.39533459656582826, 0.19698295710018532, 0.35783608164979097, 0.95606465217290781, 0.74431555255565063, 0.7428221950580528, 0.073939298102165152, 0.54438822298734679, 0.68440500687826844, 0.094615422347668621, 0.12299171698656741, 0.3368345535585604, 0.5855572230799837, 0.50004716800287075, 0.00487030675457667, 0.37744300519164209, 0.79632578974727519, 0.99204592876924325, 0.3887380705198169, 0.60068498544463333, 0.82414236052678258, 0.90075365154020437, 0.99861750905195135, 0.3790741902326622, 0.1955529950182826, 1, 0.55840998376922668, 0.058906889648087546, 0.92852337998664147, 0.60632029549739053, 0.079805681537355233, 0.63225238465794131, 0.78747811486370256, 0.24569668883835361, 0.29661113156759555, 0.40120402756865914, 0.94799913229234556, 0.10821021365983263, 0.809945448596173, 0.24832370346331933, 0.43927671374704069, 0.98591932719852116, 0.60261405979426041, 0.32910754867373293, 0.68732570071313148, 0.35422507755021659, 0.21370476673656669, 0.40125248411218528, 0.35487889512927073, 0.084702811710197667, 0.20109457688563281, 0.11293312924756715, 0.38863152237684417, 0.026270116373781294, 0.60997187347561588, 0.656808564136043, 0.18159372256701667, 0.73020341667036481, 0.535214029534594, 0.64787074836944269, 0.93009773892283654, 0.62018240219647658, 0.50165679715315026, 0.88671275172824027, 0.41267982645783097, 0.35069207266964209, 0.72610511928405674, 0.88367577691810673, 0.88872893678566312, 0.58721410178881861, 0.30866791456354126, 0.95897108938950582, 0.79284718347079586, 0.58988488343636114, 0.177658634831532, 0.26921783750431028, 0.32355007587269413, 0.26979727597464587, 0.59530083822684154, 0.081176156364375918, 0.33732012744770712, 0.54771064520946833, 0.057520873977353282, 0.11914744036254643, 0.64955727007670638, 0.48228918405165011, 0.04080594603038834, 0.267124344981592, 0.24744580047779108, 0.014994741195717975, 0.0741301506337706, 0.73650171265281084, 0.72764232055945, 0.89655856812977364, 0.40798901449914038, 0.76826795247346136, 0.22272179882718235, 0.4412720042002759, 0.072768244505363233, 0.14975498983628011, 0.32627951845545655, 0.091779653227329283, 0.28114383078842831, 0.40305972633414455, 0.18411149150682748, 0.21134569573011208, 0.99752000575652133, 0.95923975323970612, 0.79819783832560676, 0.9432557335201559, 0.48936319390034144, 0.52010040556319082, 0.066069016637926414, 0.7181304664906798, 0.68979419832217648, 0.32386476115062124, 0.72313186889768155, 0.61533184627761917, 0.93216014669977654, 0.85544029311977954, 0.36646143308737944, 0.69480194790841632, 0.78620384924765274, 0.54719765428866318, 0.14653462859262545, 0.56125968439382234, 0.74950592463158039, 0.4334655322908878, 0.97370371713047255, 0.21476186955301269, 0.44331066911346562, 0.68223129453269382, 0.62490009012322922, 0.7757842795946972, 0.62274013354332713, 0.70502696972877787, 0.9948883883912889, 0.40611224187603068, 0.9438338863700747, 0.076145433854447941, 0.23500294886202511, 0.296541392995047, 0.6623193167674567, 0.507252592396267, 0.41528192566980948, 0.330841237222552, 0.97203071201720037, 0.40213655158106687, 0.12921458899938, 0.59414499700550494, 0.51690515222289735, 0, 0.55036371152518393, 0.15315305326725115, 0.92059080367719992, 0.54159071691966854, 0.34503121747967691, 0.25335034484324048, 0.070354130152726735, 0.42658218385108548, 0.31425545353401163, 0.23650033690313088, 0.093225627656105314, 0.011374007047191492, 0.63499218517702671, 0.65302253657246834, 0.8187383822777462, 0.084884846942888337, 0.061308594241355152, 0.98241074321487576, 0.17013492133892438, 0.6168865599526594, 0.89577748368133525, 0.17245916418855467, 0.57648701743613429 };
        #endregion

        /// <summary>
        /// Returns true with probability 1 / (n + 1), the ratio used for randomized binary tree insertion
        /// </summary>
        public static bool Choose(int n, ref uint randomState)
        {
            if (n > MaxTableIndex) { return ChooseXorShift(n, ref randomState); }

            var randomStateValue = randomState;
            var result = n <= MaxNTable[(randomStateValue >> Shift) & MaxTableIndex];
            randomState = unchecked(randomStateValue + Prime);
            return result;
        }

        private static bool ChooseXorShift(int n, ref uint randomState)
        {
            var randomValue = XorShift32(ref randomState);
            // r < 1 / (n + 1) <=> r * (n + 1) < 1
            return randomValue * (n + 1) < 1;
        }

        /// <summary>
        /// Returns true with probability n / (n + m), the ratio used for randomized binary tree deletion.
        /// See http://algo.inria.fr/seminars/sem96-97/martinez.html
        /// </summary>
        public static bool Choose(int n, int m, ref uint randomState)
        {
            double randomValue;
            if (m + n > MaxTableIndex) // todo confirm
            {
                randomValue = XorShift32(ref randomState);
            }
            else
            {
                var randomStateValue = randomState;
                randomValue = NextDoubleTable[(randomStateValue >> Shift) & MaxTableIndex];
                randomState = randomStateValue + Prime;
            }

            // randomValue < n / (n + m) <=> (n + m) * randomValue < n
            return (n + m) * randomValue < n;
        }

        private static double XorShift32(ref uint randomState)
        {
            var x = randomState;
            if (x == 0)
            {
                // avoid being caught in a 0 loop, since this algorithm 
                // cannot leave the 0 state by itself
                x = RandomStateStart;
            }
            else
            {
                x ^= x << 13;
                x ^= x >> 17;
                x ^= x << 5;
            }

            randomState = x;
            return x / (double)uint.MaxValue;
        }
    }
}
